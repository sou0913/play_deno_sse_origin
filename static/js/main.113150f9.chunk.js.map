{"version":3,"sources":["reportWebVitals.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","props","useState","value","setValue","handleSubmit","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","status","console","log","className","action","onSubmit","type","placeholder","name","onChange","target","DataInjector","setStatus","loading","setLoading","error","setError","useEffect","evtSource","EventSource","onopen","onmessage","data","onerror","close","useStatus","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6CC+Bd,SAASQ,EAAIC,GAA4B,IAAD,EAEZC,mBAAS,IAFG,mBAE/BC,EAF+B,KAExBC,EAFwB,KAIhCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACnBD,EAAEE,iBADiB,SAEbC,MAAM,UAAW,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,OAAQZ,MAPd,OASnBa,QAAQC,IAAI,kBATO,2CAAH,sDAYlB,OACE,qBAAKC,UAAU,sBAAf,SACE,uBAAMC,OAAO,UAAUT,OAAO,OAAOU,SAAUf,EAA/C,UACE,uBACEgB,KAAK,OACLC,YAAY,SACZC,KAAK,SACLpB,MAAOA,EACPqB,SAAU,SAAClB,GAAD,OAAOF,EAASE,EAAEmB,OAAOtB,QACnCe,UAAU,0BAEZ,wBAAQG,KAAK,SAASH,UAAU,4BAAhC,yBAMOQ,MA5Cf,WAAyB,IAAD,IA1BxB,WAAsB,IAAD,EACSxB,mBAAiB,IAD1B,mBACZa,EADY,KACJY,EADI,OAEWzB,oBAAkB,GAF7B,mBAEZ0B,EAFY,KAEHC,EAFG,OAGO3B,mBAAiB,IAHxB,mBAGZ4B,EAHY,KAGLC,EAHK,KAmBnB,OAfAC,qBAAU,WACR,IAAMC,EAAY,IAAIC,YAAY,WAYlC,OAXAD,EAAUE,OAAS,SAAU7B,GAC3BuB,GAAW,GACXb,QAAQC,IAAI,WAAYX,IAE1B2B,EAAUG,UAAY,SAAU9B,GAC9BqB,EAAUrB,EAAE+B,OAEdJ,EAAUK,QAAU,SAAUhC,GAC5ByB,EAAS,sBACTf,QAAQC,IAAI,UAAWX,IAElB,kBAAM2B,EAAUM,YAElB,CACLxB,SACAa,UACAE,SAKwBU,GAAlBzB,EADc,EACdA,OAAQe,EADM,EACNA,MAEhB,OACE,0CACGA,EAAMW,OAAS,SADlB,QACuB,4BAAIX,IACzB,cAAC,EAAD,CAAKf,OAAQA,QC7BnB2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BvD,M","file":"static/js/main.113150f9.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction useStatus() {\n  const [status, setStatus] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>(\"\");\n  useEffect(() => {\n    const evtSource = new EventSource(\"/status\");\n    evtSource.onopen = function (e) {\n      setLoading(false);\n      console.log(\"opened: \", e);\n    };\n    evtSource.onmessage = function (e) {\n      setStatus(e.data);\n    };\n    evtSource.onerror = function (e) {\n      setError(\"An error happened.\");\n      console.log(\"error: \", e);\n    };\n    return () => evtSource.close();\n  });\n  return {\n    status,\n    loading,\n    error,\n  };\n}\n\nfunction DataInjector() {\n  const { status, error } = useStatus();\n\n  return (\n    <div>\n      {error.length > 0 ?? <p>{error}</p>}\n      <App status={status} />\n    </div>\n  )\n}\n\nfunction App(props: { status: string }) {\n\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    await fetch(\"/status\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ status: value }),\n    });\n    console.log(\"POST completed\");\n  };\n\n  return (\n    <div className=\"App font-extralight\">\n      <form action=\"/status\" method=\"POST\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"status\"\n          name=\"status\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          className=\"border-2 border-black\"\n        />\n        <button type=\"submit\" className=\"p-2 border-1 border-black\">submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default DataInjector;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport DataInjector from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataInjector />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}